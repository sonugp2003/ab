/**
 * @file Overview
 * This ruleset enforces a strict user-ownership model for room owners and their associated data (rooms, tenants, payments).
 * All data is nested under specific resource collections (roomOwners, rooms).
 * Key Security Decisions:
 * - Room Owners can only manage their own rooms.
 * - Tenants can only manage their own payments within a room they belong to.
 * - Data consistency is enforced between document IDs and internal ownership fields.
 * - Listing of tenants and payments is allowed only within the context of a room.
 * - These rules prioritize Authorization Independence by denormalizing authorization-related data directly onto the documents, avoiding costly `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages room owner profiles. Only the room owner can read and write their own profile.
     * @path /roomOwners/{roomOwnerId}
     * @allow (create) User with UID 'user_abc' creates their own profile at /roomOwners/user_abc.
     * @deny (create) User with UID 'user_def' attempts to create a profile at /roomOwners/user_abc.
     * @principle Enforces document ownership for all operations on room owner profiles.
     */
    match /roomOwners/{roomOwnerId} {
      //  ---- Read Rules ----
      allow get: if isOwner(roomOwnerId);
      allow list: if false;

      // ---- Write Rules ----
      allow create: if isOwner(roomOwnerId);
      allow update: if isOwner(roomOwnerId) && isSignedIn();
      allow delete: if isOwner(roomOwnerId) && isSignedIn();
    }

    /**
     * @description Manages room information. Only the room owner can manage their rooms.
     * @path /rooms/{roomId}
     * @allow (create) User with UID 'user_abc' creates a room with roomOwnerId: 'user_abc'.
     * @deny (update) User with UID 'user_def' attempts to update a room owned by 'user_abc'.
     * @principle Enforces document ownership for all operations on room documents.
     */
    match /rooms/{roomId} {
      //  ---- Read Rules ----
      allow get: if true;
      allow list: if true;

      // ---- Write Rules ----
      allow create: if request.resource.data.roomOwnerId == request.auth.uid && isSignedIn();
      allow update: if get(/databases/$(database)/documents/rooms/$(roomId)).data.roomOwnerId == request.auth.uid && isSignedIn();
      allow delete: if get(/databases/$(database)/documents/rooms/$(roomId)).data.roomOwnerId == request.auth.uid && isSignedIn();
    }

    /**
     * @description Manages tenant profiles associated with a specific room. Room owners can manage tenants in their rooms.
     * @path /rooms/{roomId}/tenants/{tenantId}
     * @allow (create) Room owner 'user_abc' creates a tenant in room 'room_xyz'.
     * @deny (update) Room owner 'user_def' attempts to update a tenant in room 'room_xyz' owned by 'user_abc'.
     * @principle Enforces room ownership for tenant management operations.
     */
    match /rooms/{roomId}/tenants/{tenantId} {
      //  ---- Read Rules ----
      allow get: if true;
      allow list: if true;

      // ---- Write Rules ----
      allow create: if get(/databases/$(database)/documents/rooms/$(roomId)).data.roomOwnerId == request.auth.uid && isSignedIn();
      allow update: if get(/databases/$(database)/documents/rooms/$(roomId)).data.roomOwnerId == request.auth.uid && isSignedIn();
      allow delete: if get(/databases/$(database)/documents/rooms/$(roomId)).data.roomOwnerId == request.auth.uid && isSignedIn();
    }

    /**
     * @description Manages payment information for a specific tenant. Only room owners can manage payments for tenants in their rooms.
     * @path /rooms/{roomId}/tenants/{tenantId}/payments/{paymentId}
     * @allow (create) Room owner 'user_abc' creates a payment for tenant 'tenant_xyz' in room 'room_xyz'.
     * @deny (update) Room owner 'user_def' attempts to update a payment for tenant 'tenant_xyz' in room 'room_xyz' owned by 'user_abc'.
     * @principle Enforces room ownership for payment management operations.
     */
    match /rooms/{roomId}/tenants/{tenantId}/payments/{paymentId} {
      //  ---- Read Rules ----
      allow get: if true;
      allow list: if true;

      // ---- Write Rules ----
      allow create: if get(/databases/$(database)/documents/rooms/$(roomId)).data.roomOwnerId == request.auth.uid && isSignedIn();
      allow update: if get(/databases/$(database)/documents/rooms/$(roomId)).data.roomOwnerId == request.auth.uid && isSignedIn();
      allow delete: if get(/databases/$(database)/documents/rooms/$(roomId)).data.roomOwnerId == request.auth.uid && isSignedIn();
    }

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId && isSignedIn();
    }
  }
}