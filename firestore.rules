/**
 * @fileoverview Firestore Security Rules for Roommate Hub.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for room owners and a room-ownership model for tenants and payments. Only the authenticated user who owns a resource (RoomOwner, Room, Tenant, Payment) has write access to it.
 *
 * Data Structure:
 * - /roomOwners/{roomOwnerId}: Stores room owner profiles, where roomOwnerId matches the Firebase Auth UID.
 * - /rooms/{roomId}: Stores room information, with each room having a roomOwnerId.
 * - /rooms/{roomId}/tenants/{tenantId}: Stores tenant profiles, each associated with a specific room and including the roomId.
 * - /rooms/{roomId}/tenants/{tenantId}/payments/{paymentId}: Stores payment information for a specific tenant.
 *
 * Key Security Decisions:
 * - RoomOwners can only manage their own profiles.
 * - Only a room owner can create, update, or delete rooms they own.
 * - Only a room owner can create, update, or delete tenants within their rooms.
 * - Only a room owner can manage payments within their rooms and associated with their tenants.
 * - Data validation is relaxed during this prototyping phase, focusing on access control.
 *
 * Denormalization for Authorization:
 * - Tenants store the `roomId` directly in their document to avoid needing to traverse the RoomOwner -> Room relationship for authorization. This ensures Authorization Independence and supports atomic operations.
 *
 * Structural Segregation:
 * - Tenant data includes the Room ID, enabling direct access to rooms without needing to traverse User -> Room relationship.
 * - This segregation supports required QAPs (Rules are not Filters) by segregating data based on access patterns. Listing tenants for a room is possible without filtering.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to room owner profiles. Only the owner can read and write their own profile.
     * @path /roomOwners/{roomOwnerId}
     * @allow (create) User with UID 'user_abc' can create a profile at /roomOwners/user_abc.
     * @deny (create) User with UID 'user_xyz' cannot create a profile at /roomOwners/user_abc.
     * @allow (get) User with UID 'user_abc' can read their profile at /roomOwners/user_abc.
     * @deny (get) User with UID 'user_xyz' cannot read the profile at /roomOwners/user_abc.
     * @allow (update) User with UID 'user_abc' can update their profile at /roomOwners/user_abc.
     * @deny (update) User with UID 'user_xyz' cannot update the profile at /roomOwners/user_abc.
     * @allow (delete) User with UID 'user_abc' can delete their profile at /roomOwners/user_abc.
     * @deny (delete) User with UID 'user_xyz' cannot delete the profile at /roomOwners/user_abc.
     * @principle Enforces document ownership for all operations.
     */
    match /roomOwners/{roomOwnerId} {
      function isOwner(roomOwnerId) {
        return request.auth != null && request.auth.uid == roomOwnerId;
      }
      function isExistingOwner(roomOwnerId) {
          return isOwner(roomOwnerId) && resource != null;
      }
      allow get: if isOwner(roomOwnerId);
      allow list: if false;
      allow create: if isOwner(roomOwnerId);
      allow update: if isExistingOwner(roomOwnerId);
      allow delete: if isExistingOwner(roomOwnerId);
    }

    /**
     * @description Controls access to room documents. Only the room owner can create, read, update, and delete rooms.
     * @path /rooms/{roomId}
     * @allow (create) User with UID 'user_abc' can create a room at /rooms/room_123 if roomOwnerId is 'user_abc'.
     * @deny (create) User with UID 'user_xyz' cannot create a room at /rooms/room_123 with roomOwnerId 'user_abc'.
     * @allow (get) User with UID 'user_abc' can read a room at /rooms/room_123 if roomOwnerId is 'user_abc'.
     * @deny (get) User with UID 'user_xyz' cannot read the room at /rooms/room_123 if roomOwnerId is 'user_abc'.
     * @allow (update) User with UID 'user_abc' can update a room at /rooms/room_123 if roomOwnerId is 'user_abc'.
     * @deny (update) User with UID 'user_xyz' cannot update the room at /rooms/room_123 if roomOwnerId is 'user_abc'.
     * @allow (delete) User with UID 'user_abc' can delete a room at /rooms/room_123 if roomOwnerId is 'user_abc'.
     * @deny (delete) User with UID 'user_xyz' cannot delete the room at /rooms/room_123 if roomOwnerId is 'user_abc'.
     * @principle Enforces document ownership for writes.
     */
    match /rooms/{roomId} {
        function getRoomOwnerId() {
            return resource.data.roomOwnerId;
        }
        function isRoomOwner(roomOwnerId) {
            return request.auth != null && request.auth.uid == roomOwnerId;
        }
        function isExistingRoomOwner(roomOwnerId) {
            return isRoomOwner(roomOwnerId) && resource != null;
        }
        allow get: if true;
        allow list: if true; // Assuming listing rooms is public.  If not, change to 'if false;' or owner-only.
        allow create: if request.resource.data.roomOwnerId == request.auth.uid;
        allow update: if isExistingRoomOwner(getRoomOwnerId());
        allow delete: if isExistingRoomOwner(getRoomOwnerId());
    }

    /**
     * @description Controls access to tenant documents within a room. Only the room owner can manage tenants.
     * @path /rooms/{roomId}/tenants/{tenantId}
     * @allow (create) User with UID 'user_abc' can create a tenant at /rooms/room_123/tenants/tenant_456 if they own room_123.
     * @deny (create) User with UID 'user_xyz' cannot create a tenant in room_123 if they do not own it.
     * @allow (get) User with UID 'user_abc' can read a tenant in room_123 if they own the room.
     * @deny (get) User with UID 'user_xyz' cannot read a tenant in room_123 if they do not own the room.
     * @allow (update) User with UID 'user_abc' can update a tenant in room_123 if they own the room.
     * @deny (update) User with UID 'user_xyz' cannot update a tenant in room_123 if they do not own the room.
     * @allow (delete) User with UID 'user_abc' can delete a tenant in room_123 if they own the room.
     * @deny (delete) User with UID 'user_xyz' cannot delete a tenant in room_123 if they do not own the room.
     * @principle Enforces room ownership for managing tenants.
     */
    match /rooms/{roomId}/tenants/{tenantId} {
        function getRoomOwnerId() {
            return get(/databases/$(database)/documents/rooms/$(roomId)).data.roomOwnerId;
        }
        function isRoomOwner(roomOwnerId) {
            return request.auth != null && request.auth.uid == roomOwnerId;
        }
        function isExistingRoomOwner(roomOwnerId) {
            return isRoomOwner(roomOwnerId) && resource != null;
        }
        allow get: if isRoomOwner(getRoomOwnerId());
        allow list: if isRoomOwner(getRoomOwnerId());
        allow create: if isRoomOwner(getRoomOwnerId());
        allow update: if isExistingRoomOwner(getRoomOwnerId());
        allow delete: if isExistingRoomOwner(getRoomOwnerId());
    }

    /**
     * @description Controls access to payment documents for tenants. Only the room owner can manage payments.
     * @path /rooms/{roomId}/tenants/{tenantId}/payments/{paymentId}
     * @allow (create) User with UID 'user_abc' can create a payment for a tenant if they own the room.
     * @deny (create) User with UID 'user_xyz' cannot create a payment if they do not own the room.
     * @allow (get) User with UID 'user_abc' can read a payment if they own the room.
     * @deny (get) User with UID 'user_xyz' cannot read a payment if they do not own the room.
     * @allow (update) User with UID 'user_abc' can update a payment if they own the room.
     * @deny (update) User with UID 'user_xyz' cannot update a payment if they do not own the room.
     * @allow (delete) User with UID 'user_abc' can delete a payment if they own the room.
     * @deny (delete) User with UID 'user_xyz' cannot delete a payment if they do not own the room.
     * @principle Enforces room ownership for managing payments.
     */
    match /rooms/{roomId}/tenants/{tenantId}/payments/{paymentId} {
        function getRoomOwnerId() {
            return get(/databases/$(database)/documents/rooms/$(roomId)).data.roomOwnerId;
        }
        function isRoomOwner(roomOwnerId) {
            return request.auth != null && request.auth.uid == roomOwnerId;
        }
        function isExistingRoomOwner(roomOwnerId) {
            return isRoomOwner(roomOwnerId) && resource != null;
        }
        allow get: if isRoomOwner(getRoomOwnerId());
        allow list: if isRoomOwner(getRoomOwnerId());
        allow create: if isRoomOwner(getRoomOwnerId());
        allow update: if isExistingRoomOwner(getRoomOwnerId());
        allow delete: if isExistingRoomOwner(getRoomOwnerId());
    }
  }
}