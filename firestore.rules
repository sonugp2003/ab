/**
 * @fileoverview Firestore Security Rules for Roommate Hub.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for room owners and their associated data (rooms, tenants, and payments).
 *
 * Data Structure:
 * - /roomOwners/{roomOwnerId}: Stores room owner profiles. The `roomOwnerId` MUST match the Firebase Auth UID.
 * - /rooms/{roomId}: Stores room information, including the `roomOwnerId`.
 * - /rooms/{roomId}/tenants/{tenantId}: Stores tenant profiles associated with a room. Includes a denormalized `roomId` field.
 * - /rooms/{roomId}/tenants/{tenantId}/payments/{paymentId}: Stores payment information for a tenant.
 *
 * Key Security Decisions:
 * - Room owners can only manage their own data (rooms, tenants, payments).
 * - Tenants are implicitly linked to a room through their location under the `/rooms/{roomId}/tenants/{tenantId}` path.
 * - Listing tenants or payments is only allowed for room owners.
 *
 * Denormalization for Authorization:
 * - Tenants store the `roomId`, enabling direct access checks to the parent room without requiring additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to room owner profiles.
     * @path /roomOwners/{roomOwnerId}
     * @allow (create) Authenticated user can create their own profile if the UID matches the document ID.
     * @allow (get, update, delete) Authenticated user can only access their own profile.
     * @deny (create) If the UID does not match the document ID.
     * @deny (update, delete) If the user is not the owner.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /roomOwners/{roomOwnerId} {
      // Only signed-in users can attempt to create a profile.
      allow create: if isSignedIn() && request.auth.uid == roomOwnerId && request.resource.data.id == roomOwnerId;
      allow get, update, delete: if isSignedIn() && isOwner(roomOwnerId) && isExistingOwner(roomOwnerId);
      allow list: if false;
    }

    /**
     * @description Controls access to room information.
     * @path /rooms/{roomId}
     * @allow (create) Authenticated user can create a room. The roomOwnerId must match the user's UID.
     * @allow (get, list, update, delete) Only the room owner can manage the room.
     * @deny (create) If the user is not authenticated.
     * @deny (update, delete) If the user is not the owner.
     * @principle Enforces document ownership for writes.
     */
    match /rooms/{roomId} {
      allow create: if isSignedIn() && request.resource.data.roomOwnerId == request.auth.uid;
      allow get, list, update, delete: if isSignedIn() && isRoomOwner(roomId) && isExistingRoomOwner(roomId);
    }

    /**
     * @description Controls access to tenant profiles.
     * @path /rooms/{roomId}/tenants/{tenantId}
     * @allow (create) Room owner can create tenants in their rooms.
     * @allow (get, list, update, delete) Only the room owner can manage tenants in their rooms.
     * @deny (create) If the user is not authenticated.
     * @deny (update, delete) If the user is not the owner.
     * @principle Enforces document ownership for writes.
     */
    match /rooms/{roomId}/tenants/{tenantId} {
      allow create: if isSignedIn() && isRoomOwner(roomId) && request.resource.data.roomId == roomId;
      allow get, list, update, delete: if isSignedIn() && isRoomOwner(roomId) && isExistingRoomOwner(roomId);
    }

    /**
     * @description Controls access to payment information.
     * @path /rooms/{roomId}/tenants/{tenantId}/payments/{paymentId}
     * @allow (create) Room owner can create payments for tenants in their rooms.
     * @allow (get, list, update, delete) Only the room owner can manage payments for tenants in their rooms.
     * @deny (create) If the user is not authenticated.
     * @deny (update, delete) If the user is not the owner.
     * @principle Enforces document ownership for writes.
     */
    match /rooms/{roomId}/tenants/{tenantId}/payments/{paymentId} {
      allow create: if isSignedIn() && isRoomOwner(roomId);
      allow get, list, update, delete: if isSignedIn() && isRoomOwner(roomId) && isExistingRoomOwner(roomId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    function isRoomOwner(roomId) {
      return get(/databases/$(database)/documents/rooms/$(roomId)).data.roomOwnerId == request.auth.uid;
    }

    function isExistingRoomOwner(roomId) {
        return isRoomOwner(roomId) && resource != null;
    }
  }
}