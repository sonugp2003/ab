/**
 * @fileoverview Firestore Security Rules for Roommate Hub.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for room owners and
 * ties tenant and payment access to the room structure. Authorization Independence
 * is achieved by denormalizing relevant data (e.g., roomId on Tenants) to avoid
 * costly `get()` calls and enable simpler, more performant rules.
 *
 * Data Structure:
 * - /roomOwners/{roomOwnerId}: Stores room owner profiles.
 * - /rooms/{roomId}: Stores room information.
 * - /rooms/{roomId}/tenants/{tenantId}: Stores tenant profiles.
 * - /rooms/{roomId}/tenants/{tenantId}/payments/{paymentId}: Stores payment information.
 *
 * Key Security Decisions:
 * - RoomOwners can only manage their own profile data.
 * - Rooms are owned by RoomOwners, and only the owner can modify room details.
 * - Tenants and Payments are scoped to a specific Room, and write access is implicitly controlled by Room ownership.
 * - Listing Tenants is permitted only to the RoomOwner.
 * - Data validation is relaxed during this prototyping phase, focusing only on
 *   ownership and relational integrity checks where absolutely necessary.
 * - All write operations are validated to verify the existence of the document before modification/deletion.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages room owner profiles. Only the owner can read and write their own profile.
     * @path /roomOwners/{roomOwnerId}
     * @allow (create, update, delete) if the user is signed in and the UID matches the roomOwnerId.
     * @allow (get) if the user is signed in and the UID matches the roomOwnerId.
     * @deny (create, update, delete) if the user is not signed in.
     * @deny (get) if the user is not signed in.
     * @principle Enforces document ownership for all operations.
     */
    match /roomOwners/{roomOwnerId} {
      function isOwner(roomOwnerId) {
        return request.auth != null && request.auth.uid == roomOwnerId;
      }
      function isExistingOwner(roomOwnerId) {
        return isOwner(roomOwnerId) && resource != null;
      }

      allow get: if isOwner(roomOwnerId);
      allow list: if false;
      allow create: if isOwner(roomOwnerId) && request.resource.data.id == roomOwnerId;
      allow update: if isExistingOwner(roomOwnerId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(roomOwnerId);
    }

    /**
     * @description Manages room information. Only the room owner can read and write room details.
     * @path /rooms/{roomId}
     * @allow (create, update, delete) if the user is the room owner (roomOwnerId matches auth UID).
     * @allow (get) if the user is the room owner.
     * @deny (create, update, delete) if the user is not the room owner.
     * @deny (get) if the user is not the room owner.
     * @principle Enforces document ownership for writes.
     */
    match /rooms/{roomId} {
      function isRoomOwner(roomId) {
          return request.auth != null && get(/databases/$(database)/documents/rooms/$(roomId)).data.roomOwnerId == request.auth.uid;
      }
      function isExistingRoomOwner(roomId) {
        return isRoomOwner(roomId) && resource != null;
      }

      allow get: if isRoomOwner(roomId);
      allow list: if false;
      allow create: if request.auth != null && request.resource.data.roomOwnerId == request.auth.uid;
      allow update: if isExistingRoomOwner(roomId);
      allow delete: if isExistingRoomOwner(roomId);
    }

    /**
     * @description Manages tenant profiles within a room. Only the room owner can manage tenants.
     * @path /rooms/{roomId}/tenants/{tenantId}
     * @allow (create, update, delete) if the user is the room owner.
     * @allow (get) if the user is the room owner.
     * @deny (create, update, delete) if the user is not the room owner.
     * @deny (get) if the user is not the room owner.
     * @principle Tenant management is restricted to the room owner.
     */
    match /rooms/{roomId}/tenants/{tenantId} {
      function isRoomOwner(roomId) {
          return request.auth != null && get(/databases/$(database)/documents/rooms/$(roomId)).data.roomOwnerId == request.auth.uid;
      }
      function isExistingRoomOwner(roomId) {
        return isRoomOwner(roomId) && resource != null;
      }

      allow get: if isRoomOwner(roomId);
      allow list: if isRoomOwner(roomId);
      allow create: if request.auth != null && request.resource.data.roomId == roomId && isRoomOwner(roomId);
      allow update: if isExistingRoomOwner(roomId) && request.resource.data.roomId == resource.data.roomId;
      allow delete: if isExistingRoomOwner(roomId);
    }

    /**
     * @description Manages payment information for a tenant within a room. Only the room owner can manage payments.
     * @path /rooms/{roomId}/tenants/{tenantId}/payments/{paymentId}
     * @allow (create, update, delete) if the user is the room owner.
     * @allow (get) if the user is the room owner.
     * @deny (create, update, delete) if the user is not the room owner.
     * @deny (get) if the user is not the room owner.
     * @principle Payment management is restricted to the room owner.
     */
    match /rooms/{roomId}/tenants/{tenantId}/payments/{paymentId} {
        function isRoomOwner(roomId) {
          return request.auth != null && get(/databases/$(database)/documents/rooms/$(roomId)).data.roomOwnerId == request.auth.uid;
        }
        function isExistingRoomOwner(roomId) {
          return isRoomOwner(roomId) && resource != null;
        }

        allow get: if isRoomOwner(roomId);
        allow list: if false;
        allow create: if isRoomOwner(roomId);
        allow update: if isExistingRoomOwner(roomId);
        allow delete: if isExistingRoomOwner(roomId);
    }
  }
}